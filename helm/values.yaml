# [GLOBAL]: Global configuration (single source of truth for image versions)
global:
  operatorUI:
    image:
      repository: ghcr.io/forkspacer/operator-ui
      tag: v0.1.7
      pullPolicy: IfNotPresent
  apiServer:
    image:
      repository: ghcr.io/forkspacer/api-server
      tag: v0.1.4
      pullPolicy: IfNotPresent

# [MANAGER]: Manager Deployment Configurations (Required for generated templates)
controllerManager:
  replicas: 1
  container:
    image:
      repository: ghcr.io/forkspacer/forkspacer
      tag: v0.1.12
    imagePullPolicy: IfNotPresent
    args:
      - "--leader-elect"
      - "--metrics-bind-address=:8443"
      - "--health-probe-bind-address=:8081"
    resources:
      limits:
        cpu: 1000m
        memory: 1028Mi
      requests:
        cpu: 10m
        memory: 64Mi
    livenessProbe:
      initialDelaySeconds: 15
      periodSeconds: 20
      httpGet:
        path: /healthz
        port: 8081
    readinessProbe:
      initialDelaySeconds: 5
      periodSeconds: 10
      httpGet:
        path: /readyz
        port: 8081
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - "ALL"
  securityContext:
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  terminationGracePeriodSeconds: 10
  serviceAccountName: forkspacer-controller-manager
  serviceAccount:
    annotations: {}

# [OPERATOR-UI]: Frontend Configuration (Optional)
# Enable this to get a web interface for managing workspaces and modules
operator-ui:
  enabled: false  # Set to true to enable web interface
  replicaCount: 1
  # Image configuration inherited from global.operatorUI.image
  service:
    # Service type options:
    # - ClusterIP: Internal access only (use with ingress or port-forward)
    # - NodePort: Direct access via node IP + port (good for local development)
    type: ClusterIP
    port: 80
    targetPort: 80
    # nodePort: 30080  # Specify port when type=NodePort (optional)
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  env:
    # API URL will be constructed dynamically based on deployment mode
    REACT_APP_API_BASE_URL: ""

# [API-SERVER]: Backend API Configuration (Required - Always Enabled)
api-server:
  enabled: true  # Cannot be disabled - API server is required
  replicaCount: 1
  # Image configuration inherited from global.apiServer.image
  service:
    type: ClusterIP  # Default: ClusterIP for production. Set to NodePort for local development
    port: 8080
    targetPort: 8421
    # nodePort: 30421  # Only used when type is NodePort
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi
  env:
    API_PORT: "8421"
    DEV: "false"

# [RBAC]: To enable RBAC (Permissions) configurations
rbac:
  enable: true

# [CRDs]: To enable the CRDs
crd:
  # This option determines whether the CRDs are included
  # in the installation process.
  enable: true

  # Enabling this option adds the "helm.sh/resource-policy": keep
  # annotation to the CRD, ensuring it remains installed even when
  # the Helm release is uninstalled.
  # NOTE: Removing the CRDs will also remove all cert-manager CR(s)
  # (Certificates, Issuers, ...) due to garbage collection.
  keep: true

# [METRICS]: Set to true to generate manifests for exporting metrics.
# To disable metrics export set false, and ensure that the
# ControllerManager argument "--metrics-bind-address=:8443" is removed.
metrics:
  enable: true

# [WEBHOOKS]: Webhooks configuration
# The following configuration is automatically generated from the manifests
# generated by controller-gen. To update run 'make manifests' and
# the edit command with the '--force' flag
webhook:
  enable: true

# [PROMETHEUS]: To enable a ServiceMonitor to export metrics to Prometheus set true
prometheus:
  enable: false

# [CERT-MANAGER]: To enable cert-manager injection to webhooks set true
certmanager:
  enable: true

# [CERT-MANAGER]: cert-manager must be pre-installed
# Install with: kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.18.2/cert-manager.yaml

# [NETWORK POLICIES]: To enable NetworkPolicies set true
networkPolicy:
  enable: false

# [INGRESS]: Unified ingress configuration for UI and API
ingress:
  enabled: false  # Set to true to enable ingress
  className: "nginx"
  annotations:
    # Production annotations (uncomment as needed):
    # cert-manager.io/cluster-issuer: letsencrypt-prod
    # nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    # 
    # For AWS ALB:
    # kubernetes.io/ingress.class: alb
    # alb.ingress.kubernetes.io/scheme: internet-facing
    # alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:...
    #
    # Rate limiting:
    # nginx.ingress.kubernetes.io/limit-rps: "100"
    # nginx.ingress.kubernetes.io/limit-connections: "10"
  hosts:
    - host: forkspacer.local  # Change to your domain (e.g., forkspacer.company.com)
      paths:
        - path: /
          pathType: Prefix
  tls: []
  # Production TLS configuration:
  # tls:
  #   - secretName: forkspacer-tls
  #     hosts:
  #       - forkspacer.company.com
