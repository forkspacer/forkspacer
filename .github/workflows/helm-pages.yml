name: Deploy Helm Charts to GitHub Pages

on:
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v4.2.0

      - name: Extract version from Chart.yaml
        id: version
        run: |
          if [ ! -f "helm/Chart.yaml" ]; then
            echo "❌ Error: helm/Chart.yaml not found"
            exit 1
          fi
          
          # Extract version and appVersion from Chart.yaml
          CHART_VERSION=$(grep '^version:' helm/Chart.yaml | awk '{print $2}' | tr -d '"' | tr -d "'")
          APP_VERSION=$(grep '^appVersion:' helm/Chart.yaml | awk '{print $2}' | tr -d '"' | tr -d "'")
          
          if [ -z "$CHART_VERSION" ]; then
            echo "❌ Error: Could not extract version from Chart.yaml"
            exit 1
          fi
          
          if [ -z "$APP_VERSION" ]; then
            echo "❌ Error: Could not extract appVersion from Chart.yaml"
            exit 1
          fi
          
          echo "version=$CHART_VERSION" >> $GITHUB_OUTPUT
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
          
          echo "📦 Chart Version: $CHART_VERSION"
          echo "🚀 App Version: $APP_VERSION"

      - name: Validate version format
        run: |
          CHART_VERSION="${{ steps.version.outputs.version }}"
          APP_VERSION="${{ steps.version.outputs.app_version }}"
          
          # Validate chart version (semantic versioning)
          if ! [[ "$CHART_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "❌ Invalid chart version format: $CHART_VERSION"
            echo "Expected: X.Y.Z or X.Y.Z-suffix (e.g., 0.1.5, 1.2.3-beta.1)"
            exit 1
          fi
          
          # Validate app version (flexible format with v prefix)
          APP_VERSION_CLEAN="${APP_VERSION#v}"
          if ! [[ "$APP_VERSION_CLEAN" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$ ]]; then
            echo "❌ Invalid app version format: $APP_VERSION"
            echo "Expected: vX.Y.Z or X.Y.Z (e.g., v0.1.5, 0.1.5, v1.2.3-beta.1)"
            exit 1
          fi
          
          echo "✅ Version formats valid"
          echo "  Chart Version: $CHART_VERSION"
          echo "  App Version: $APP_VERSION"

      - name: Package Helm Chart
        id: package
        run: |
          CHART_VERSION="${{ steps.version.outputs.version }}"
          
          # Package chart directly from helm directory
          helm package helm/
          
          CHART_FILE="forkspacer-${CHART_VERSION}.tgz"
          
          # Verify it exists
          if [ ! -f "$CHART_FILE" ]; then
            echo "❌ Error: Expected chart file not found: $CHART_FILE"
            echo "Available files:"
            ls -la *.tgz 2>&1 || echo "No .tgz files found"
            exit 1
          fi
          
          echo "chart_file=$CHART_FILE" >> $GITHUB_OUTPUT
          echo "✅ Packaged: $CHART_FILE ($(du -h $CHART_FILE | cut -f1))"


      - name: Create charts directory
        run: |
          CHART_VERSION="${{ steps.version.outputs.version }}"
          CHART_FILE="${{ steps.package.outputs.chart_file }}"
          
          # Create a charts directory for GitHub Pages
          mkdir -p charts-site

          echo "📥 Fetching existing charts from GitHub Pages..."

          if curl -fsSL https://forkspacer.github.io/forkspacer/index.yaml -o /tmp/current-index.yaml 2>/dev/null; then
            echo "✅ Found existing Helm repository"

            # Extract all chart URLs from index.yaml
            grep -oP 'https://forkspacer\.github\.io/forkspacer/forkspacer-[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?\.tgz' /tmp/current-index.yaml | sort -u | while read url; do
              filename=$(basename "$url")

              # Skip if this is the version we're about to deploy
              if [[ "$filename" == "forkspacer-${CHART_VERSION}.tgz" ]]; then
                echo "  ⏭️  Skipping $filename (will be replaced)"
                continue
              fi

              echo "  📥 Downloading $filename..."
              if curl -fsSL "$url" -o "charts-site/$filename"; then
                echo "  ✅ Downloaded $filename"
              else
                echo "  ⚠️  Failed to download $filename"
              fi
            done

            echo "✅ Downloaded $(ls charts-site/forkspacer-*.tgz 2>/dev/null | wc -l) existing chart(s)"
          else
            echo "ℹ️  No existing charts found (first deployment)"
          fi

          # Copy the newly packaged chart
          cp "$CHART_FILE" charts-site/
          echo "✅ Added new chart: $CHART_FILE"
          
          # Generate repository index
          helm repo index charts-site/ --url https://forkspacer.github.io/forkspacer
          
          # Generate index.html from template
          if [ -f ".github/templates/helm-page.html" ]; then
            cp .github/templates/helm-page.html charts-site/index.html
            
            # Replace version placeholders
            sed -i "s/{{VERSION_TAG}}/${{ steps.version.outputs.app_version }}/g" charts-site/index.html
            sed -i "s/{{VERSION_NUMBER}}/${{ steps.version.outputs.version }}/g" charts-site/index.html
            
            echo "✅ Generated index.html from template"
          else
            echo "⚠️  Warning: .github/templates/helm-page.html not found, skipping HTML generation"
          fi
          
          echo "✅ Created charts site with $(ls charts-site/forkspacer-*.tgz 2>/dev/null | wc -l) chart version(s)"
          echo ""
          echo "📦 Available versions:"
          ls -lh charts-site/forkspacer-*.tgz || echo "No charts found"


      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: charts-site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Summary
        run: |
          echo "## 🎉 Helm Charts Deployed" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Chart**: ${{ steps.package.outputs.chart_file }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: https://forkspacer.github.io/forkspacer" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Installation" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "helm repo add forkspacer https://forkspacer.github.io/forkspacer" >> $GITHUB_STEP_SUMMARY
          echo "helm repo update" >> $GITHUB_STEP_SUMMARY
          echo "helm install forkspacer forkspacer/forkspacer" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY